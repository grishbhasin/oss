/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.79
 * Generated at: 2017-08-02 16:12:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.renderer;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.jaeksoft.searchlib.result.AbstractResultSearch;
import com.jaeksoft.searchlib.facet.FacetField;
import com.jaeksoft.searchlib.facet.FacetList;
import com.jaeksoft.searchlib.renderer.Renderer;
import com.jaeksoft.searchlib.renderer.filter.RendererFilter;
import com.jaeksoft.searchlib.renderer.filter.RendererFilterItem;
import com.jaeksoft.searchlib.renderer.filter.RendererFilterQueries;
import com.jaeksoft.searchlib.facet.Facet;
import com.jaeksoft.searchlib.facet.FacetCounter;
import java.net.URLEncoder;
import java.util.Set;
import java.util.List;
import java.util.Map.Entry;

public final class facet_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

	Renderer renderer = (Renderer) request.getAttribute("renderer");
	AbstractResultSearch<?> facetResult = (AbstractResultSearch<?>) request
			.getAttribute("facetResult");
	RendererFilterQueries filterQueries = (RendererFilterQueries) session
			.getAttribute("filterQueries");
	String getUrl = (String) request.getAttribute("getUrl");

      out.write("\n");
      out.write("<div class=\"osscmnrdr oss-facet\">\n");
      out.write("\t");

		if (filterQueries != null && !filterQueries.isEmpty()) {
	
      out.write("\n");
      out.write("\t<div class=\"panel panel-default\">\n");
      out.write("\t\t<div class=\"panel-heading\">\n");
      out.write("\t\t\t<h3 class=\"panel-title\">");
      out.print(renderer.getFiltersTitleText());
      out.write("</h3>\n");
      out.write("\t\t</div>\n");
      out.write("\t\t<div class=\"panel-body\">\n");
      out.write("\t\t\t<ul style=\"list-style-type: none\">\n");
      out.write("\t\t\t\t<li><a href=\"");
      out.print(getUrl + "&fqc");
      out.write('"');
      out.write('>');
      out.print(renderer.getClearFiltersText());
      out.write("</a></li>\n");
      out.write("\t\t\t\t");

					for (String fieldName : filterQueries.getTermsFilterSet()) {
							for (String term : filterQueries.getTermSet(fieldName)) {
								String filterUrl = getUrl
										+ filterQueries.getFilterParamTerm(true,
												fieldName, term);
				
      out.write("\n");
      out.write("\t\t\t\t<li><a href=\"");
      out.print(filterUrl);
      out.write("\" title=\"");
      out.print(fieldName);
      out.write("\"><strong>");
      out.print(term);
      out.write("</strong></a></li>\n");
      out.write("\t\t\t\t");

					}
						}
				
      out.write("\n");
      out.write("\t\t\t</ul>\n");
      out.write("\t\t</div>\n");
      out.write("\t</div>\n");
      out.write("\t");

		}
	
      out.write('\n');
      out.write('	');

		List<RendererFilter> filters = renderer.getFilters();
		if (filters != null && filters.size() > 0) {
	
      out.write('\n');
      out.write('	');

		for (RendererFilter filter : renderer.getFilters()) {
	
      out.write("\n");
      out.write("\t<div class=\"panel panel-default\">\n");
      out.write("\t\t<div class=\"panel-heading\">\n");
      out.write("\t\t\t<h3 class=\"panel-title\">");
      out.print(filter.getPublicName());
      out.write("</h3>\n");
      out.write("\t\t</div>\n");
      out.write("\t\t<div class=\"panel-body\">\n");
      out.write("\t\t\t<ul style=\"list-style-type: none\">\n");
      out.write("\t\t\t\t");

					String fieldName = filter.getFieldName();
							for (RendererFilterItem filterItem : filter
									.getFilterItems(facetResult)) {
								boolean current = filterQueries.contains(fieldName,
										filterItem);
								String filterUrl = getUrl;
								filterUrl += filterQueries.getFilterParam(current,
										fieldName, filterItem);
				
      out.write("\n");
      out.write("\t\t\t\t<li><a href=\"");
      out.print(filterUrl);
      out.write('"');
      out.write('>');
      out.write(' ');

 	if (current) {
 
      out.write("<strong> ");

 	}
 
      out.print(filterItem.getLabel());
      out.write(' ');

 	if (current) {
 
      out.write("\n");
      out.write("\t\t\t\t\t</strong> ");

 	}
 
      out.write("\n");
      out.write("\t\t\t\t</a></li>\n");
      out.write("\t\t\t\t");

					}
				
      out.write("\n");
      out.write("\t\t\t</ul>\n");
      out.write("\t\t</div>\n");
      out.write("\t</div>\n");
      out.write("\t");

		}
		}
	
      out.write('\n');
      out.write('	');

		FacetList facetList = null;
		if (facetResult != null)
			facetList = facetResult.getFacetList();
		if (facetList != null && facetList.getList().size() > 0) {
			for (Facet facet : facetList) {
				if (renderer.isFilterListReplacement(facet))
					continue;
				String fieldName = facet.getFacetField().getName();
	
      out.write("\n");
      out.write("\t<div class=\"panel panel-default\">\n");
      out.write("\t\t<div class=\"panel-heading\">\n");
      out.write("\t\t\t<h3 class=\"panel-title text-capitalize\">");
      out.print(fieldName);
      out.write("</h3>\n");
      out.write("\t\t</div>\n");
      out.write("\t\t<div class=\"panel-body\">\n");
      out.write("\t\t\t<ul style=\"list-style-type: none\">\n");
      out.write("\t\t\t\t");

					for (Entry<String, FacetCounter> facetItem : facet) {
								boolean current = filterQueries.contains(fieldName,
										facetItem);
								String filterUrl = getUrl;
								filterUrl += filterQueries.getFilterParam(current,
										fieldName, facetItem);
				
      out.write("\n");
      out.write("\t\t\t\t<li><a href=\"");
      out.print(filterUrl);
      out.write('"');
      out.write('>');
      out.write(' ');

 	if (current) {
 
      out.write("<strong> ");

 	}
 
      out.print(facetItem.getKey());
      out.write(' ');
      out.write('(');
      out.print(facetItem.getValue().count);
      out.write(')');
      out.write(' ');

 	if (current) {
 
      out.write("\n");
      out.write("\t\t\t\t\t</strong> ");

 	}
 
      out.write("\n");
      out.write("\t\t\t\t</a></li>\n");
      out.write("\t\t\t\t");

					}
				
      out.write("\n");
      out.write("\t\t\t</ul>\n");
      out.write("\t\t</div>\n");
      out.write("\t</div>\n");
      out.write("\t");

		}
		}
	
      out.write("\n");
      out.write("</div>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
