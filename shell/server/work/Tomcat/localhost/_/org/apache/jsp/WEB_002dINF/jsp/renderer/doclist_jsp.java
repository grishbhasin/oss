/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.79
 * Generated at: 2017-08-02 16:12:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.renderer;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import com.jaeksoft.searchlib.result.AbstractResultSearch;
import com.jaeksoft.searchlib.request.AbstractSearchRequest;
import com.jaeksoft.searchlib.result.ResultDocument;
import com.jaeksoft.searchlib.renderer.field.RendererField;
import com.jaeksoft.searchlib.renderer.field.RendererWidgetType;
import com.jaeksoft.searchlib.renderer.Renderer;

public final class doclist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

	AbstractResultSearch<?> result = (AbstractResultSearch<?>) request
			.getAttribute("result");
	if (result != null) {
		Renderer renderer = (Renderer) request.getAttribute("renderer");
		if (result.getDocumentCount() > 0) {
			boolean isJoin = renderer.isFieldWithJoin();
			AbstractSearchRequest searchRequest = result.getRequest();
			int start = searchRequest.getStart();
			int end = searchRequest.getStart()
					+ result.getDocumentCount();

      out.write("\n");
      out.write("<div class=\"osscmnrdr oss-result\">\n");
      out.write("\t");

		for (int i = start; i < end; i++) {
					ResultDocument mainResultDocument = result
							.getDocument(i);
					List<ResultDocument> joinResultDocuments = null;
					if (isJoin)
						joinResultDocuments = result.getJoinDocumentList(i,
								null);
					Integer fieldPos = 0;
					boolean lastWasReplace = false;
					String[] lastFieldValues = null;
					for (RendererField rendererField : renderer.getFields()) {
						if (rendererField.isReplacePrevious()) {
							if (!lastWasReplace)
								fieldPos--;
							lastWasReplace = true;
							if (lastFieldValues != null)
								continue;
						}
						ResultDocument resultDocument = rendererField
								.getResultDocument(mainResultDocument,
										joinResultDocuments);
						request.setAttribute("resultDocument",
								resultDocument);

						fieldPos++;
						request.setAttribute("fieldPos", fieldPos);
						RendererWidgetType widget = rendererField
								.getWidgetName();
						String[] fieldValues = rendererField
								.getFieldValue(resultDocument);
						lastFieldValues = fieldValues;
						if (fieldValues != null) {
							for (String fieldValue : fieldValues) {
								request.setAttribute("rendererValue",
										fieldValue);
								request.setAttribute("rendererField",
										rendererField);
	
      out.write("\n");
      out.write("\t<div\n");
      out.write("\t\tclass=\"osscmnrdr ossfieldrdr");
      out.print(fieldPos);
      out.print(rendererField.renderCssClass());
      out.write("\">\n");
      out.write("\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, widget.getJspPath(), out, true);
      out.write("\n");
      out.write("\t</div>\n");
      out.write("\t");

		}
						}
					}
	
      out.write("\n");
      out.write("\t<br />\n");
      out.write("\t");

		}
	
      out.write('\n');
      out.write('	');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "paging.jsp", out, false);
      out.write("\n");
      out.write("</div>\n");

	}
	}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
